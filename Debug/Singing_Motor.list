
Singing_Motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000714  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800089c  0800089c  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  0800089c  0800089c  0001089c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080008a0  080008a0  000108a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  20000000  080008a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
  7 .bss          0000001c  2000006c  2000006c  0002006c  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000088  20000088  0002006c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000153e  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000053d  00000000  00000000  000215da  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000170  00000000  00000000  00021b18  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000118  00000000  00000000  00021c88  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00000a7c  00000000  00000000  00021da0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00000674  00000000  00000000  0002281c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00022e90  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000003c4  00000000  00000000  00022f0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000006c 	.word	0x2000006c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000884 	.word	0x08000884

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000070 	.word	0x20000070
 80001c4:	08000884 	.word	0x08000884

080001c8 <Sing_Start>:
		{N, FULL_DO},
};
uint16_t i = 1;

void Sing_Start()
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	TIM1_Set_PWM_Freq(notes[0][0]);
 80001cc:	4b07      	ldr	r3, [pc, #28]	; (80001ec <Sing_Start+0x24>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	4618      	mov	r0, r3
 80001d2:	f000 f945 	bl	8000460 <TIM1_Set_PWM_Freq>
	TIM7_SetVal(notes[0][1]);
 80001d6:	4b05      	ldr	r3, [pc, #20]	; (80001ec <Sing_Start+0x24>)
 80001d8:	685b      	ldr	r3, [r3, #4]
 80001da:	b29b      	uxth	r3, r3
 80001dc:	4618      	mov	r0, r3
 80001de:	f000 f9c5 	bl	800056c <TIM7_SetVal>
	TIM1_PWM_Start();
 80001e2:	f000 f909 	bl	80003f8 <TIM1_PWM_Start>
}
 80001e6:	bf00      	nop
 80001e8:	bd80      	pop	{r7, pc}
 80001ea:	bf00      	nop
 80001ec:	20000000 	.word	0x20000000

080001f0 <TIM7_IRQHandler>:

void TIM7_IRQHandler(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	af00      	add	r7, sp, #0
	TIM7->SR &= 0x0;
 80001f4:	4b18      	ldr	r3, [pc, #96]	; (8000258 <TIM7_IRQHandler+0x68>)
 80001f6:	8a1b      	ldrh	r3, [r3, #16]
 80001f8:	4b17      	ldr	r3, [pc, #92]	; (8000258 <TIM7_IRQHandler+0x68>)
 80001fa:	2200      	movs	r2, #0
 80001fc:	821a      	strh	r2, [r3, #16]
	TIM1_PWM_Stop();
 80001fe:	f000 f915 	bl	800042c <TIM1_PWM_Stop>
	if(i == X - 1)
 8000202:	4b16      	ldr	r3, [pc, #88]	; (800025c <TIM7_IRQHandler+0x6c>)
 8000204:	881b      	ldrh	r3, [r3, #0]
 8000206:	2b0c      	cmp	r3, #12
 8000208:	d103      	bne.n	8000212 <TIM7_IRQHandler+0x22>
		i = 0;
 800020a:	4b14      	ldr	r3, [pc, #80]	; (800025c <TIM7_IRQHandler+0x6c>)
 800020c:	2200      	movs	r2, #0
 800020e:	801a      	strh	r2, [r3, #0]
 8000210:	e005      	b.n	800021e <TIM7_IRQHandler+0x2e>
	else
		i ++;
 8000212:	4b12      	ldr	r3, [pc, #72]	; (800025c <TIM7_IRQHandler+0x6c>)
 8000214:	881b      	ldrh	r3, [r3, #0]
 8000216:	3301      	adds	r3, #1
 8000218:	b29a      	uxth	r2, r3
 800021a:	4b10      	ldr	r3, [pc, #64]	; (800025c <TIM7_IRQHandler+0x6c>)
 800021c:	801a      	strh	r2, [r3, #0]
	TIM1_Set_PWM_Freq(notes[i][0]);
 800021e:	4b0f      	ldr	r3, [pc, #60]	; (800025c <TIM7_IRQHandler+0x6c>)
 8000220:	881b      	ldrh	r3, [r3, #0]
 8000222:	461a      	mov	r2, r3
 8000224:	4b0e      	ldr	r3, [pc, #56]	; (8000260 <TIM7_IRQHandler+0x70>)
 8000226:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800022a:	4618      	mov	r0, r3
 800022c:	f000 f918 	bl	8000460 <TIM1_Set_PWM_Freq>
	TIM7_SetVal(notes[i][1]);
 8000230:	4b0a      	ldr	r3, [pc, #40]	; (800025c <TIM7_IRQHandler+0x6c>)
 8000232:	881b      	ldrh	r3, [r3, #0]
 8000234:	4a0a      	ldr	r2, [pc, #40]	; (8000260 <TIM7_IRQHandler+0x70>)
 8000236:	00db      	lsls	r3, r3, #3
 8000238:	4413      	add	r3, r2
 800023a:	685b      	ldr	r3, [r3, #4]
 800023c:	b29b      	uxth	r3, r3
 800023e:	4618      	mov	r0, r3
 8000240:	f000 f994 	bl	800056c <TIM7_SetVal>
	TIM1_Set_PWM_Duty(50);
 8000244:	2032      	movs	r0, #50	; 0x32
 8000246:	f000 f929 	bl	800049c <TIM1_Set_PWM_Duty>
	TIM1_PWM_Start();
 800024a:	f000 f8d5 	bl	80003f8 <TIM1_PWM_Start>
	TIM7_Start();
 800024e:	f000 f97b 	bl	8000548 <TIM7_Start>
}
 8000252:	bf00      	nop
 8000254:	bd80      	pop	{r7, pc}
 8000256:	bf00      	nop
 8000258:	40001400 	.word	0x40001400
 800025c:	20000068 	.word	0x20000068
 8000260:	20000000 	.word	0x20000000

08000264 <TIM1_Init>:
#include "stm32f4xx.h"
#include "TIM.h"
#define SYSCLK 160000000

void TIM1_Init(uint32_t PSC)
{
 8000264:	b480      	push	{r7}
 8000266:	b083      	sub	sp, #12
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;    // ENABLE TIM1 Timer
 800026c:	4a5d      	ldr	r2, [pc, #372]	; (80003e4 <TIM1_Init+0x180>)
 800026e:	4b5d      	ldr	r3, [pc, #372]	; (80003e4 <TIM1_Init+0x180>)
 8000270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000272:	f043 0301 	orr.w	r3, r3, #1
 8000276:	6453      	str	r3, [r2, #68]	; 0x44
	TIM1->PSC     = PSC;                   // Pre Scale Value
 8000278:	4b5b      	ldr	r3, [pc, #364]	; (80003e8 <TIM1_Init+0x184>)
 800027a:	687a      	ldr	r2, [r7, #4]
 800027c:	b292      	uxth	r2, r2
 800027e:	851a      	strh	r2, [r3, #40]	; 0x28
	TIM1->CR1     = 0x00000084;            // ENABLE ARR, ENABLE Update IRQ
 8000280:	4b59      	ldr	r3, [pc, #356]	; (80003e8 <TIM1_Init+0x184>)
 8000282:	2284      	movs	r2, #132	; 0x84
 8000284:	801a      	strh	r2, [r3, #0]
	TIM1->CCMR1   |= (1 << 3);             // CC1 Preload ENABLE
 8000286:	4a58      	ldr	r2, [pc, #352]	; (80003e8 <TIM1_Init+0x184>)
 8000288:	4b57      	ldr	r3, [pc, #348]	; (80003e8 <TIM1_Init+0x184>)
 800028a:	8b1b      	ldrh	r3, [r3, #24]
 800028c:	b29b      	uxth	r3, r3
 800028e:	f043 0308 	orr.w	r3, r3, #8
 8000292:	b29b      	uxth	r3, r3
 8000294:	8313      	strh	r3, [r2, #24]
	TIM1->CCMR1   |= (0x03 << 5);          // CC1 = PWM2
 8000296:	4a54      	ldr	r2, [pc, #336]	; (80003e8 <TIM1_Init+0x184>)
 8000298:	4b53      	ldr	r3, [pc, #332]	; (80003e8 <TIM1_Init+0x184>)
 800029a:	8b1b      	ldrh	r3, [r3, #24]
 800029c:	b29b      	uxth	r3, r3
 800029e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80002a2:	b29b      	uxth	r3, r3
 80002a4:	8313      	strh	r3, [r2, #24]
	TIM1->CCER    |= (1 << 2);          // CC1N High Available
 80002a6:	4a50      	ldr	r2, [pc, #320]	; (80003e8 <TIM1_Init+0x184>)
 80002a8:	4b4f      	ldr	r3, [pc, #316]	; (80003e8 <TIM1_Init+0x184>)
 80002aa:	8c1b      	ldrh	r3, [r3, #32]
 80002ac:	b29b      	uxth	r3, r3
 80002ae:	f043 0304 	orr.w	r3, r3, #4
 80002b2:	b29b      	uxth	r3, r3
 80002b4:	8413      	strh	r3, [r2, #32]
	TIM1->CCER    &= ~(1 << 1);            // CC1 LOW Available
 80002b6:	4a4c      	ldr	r2, [pc, #304]	; (80003e8 <TIM1_Init+0x184>)
 80002b8:	4b4b      	ldr	r3, [pc, #300]	; (80003e8 <TIM1_Init+0x184>)
 80002ba:	8c1b      	ldrh	r3, [r3, #32]
 80002bc:	b29b      	uxth	r3, r3
 80002be:	f023 0302 	bic.w	r3, r3, #2
 80002c2:	b29b      	uxth	r3, r3
 80002c4:	8413      	strh	r3, [r2, #32]
	TIM1->BDTR    |= (0x03 << 14) | (0x03 << 10);
 80002c6:	4948      	ldr	r1, [pc, #288]	; (80003e8 <TIM1_Init+0x184>)
 80002c8:	4b47      	ldr	r3, [pc, #284]	; (80003e8 <TIM1_Init+0x184>)
 80002ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80002ce:	b29a      	uxth	r2, r3
 80002d0:	4b46      	ldr	r3, [pc, #280]	; (80003ec <TIM1_Init+0x188>)
 80002d2:	4313      	orrs	r3, r2
 80002d4:	b29b      	uxth	r3, r3
 80002d6:	f8a1 3044 	strh.w	r3, [r1, #68]	; 0x44
                                           // Auto Output, Master Output, OSSR, OSSI ENABLE
	TIM1->BDTR    |= (0x03 << 6);          // Dead Area Step 1us
 80002da:	4a43      	ldr	r2, [pc, #268]	; (80003e8 <TIM1_Init+0x184>)
 80002dc:	4b42      	ldr	r3, [pc, #264]	; (80003e8 <TIM1_Init+0x184>)
 80002de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80002e2:	b29b      	uxth	r3, r3
 80002e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80002e8:	b29b      	uxth	r3, r3
 80002ea:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
	RCC->AHB1ENR  |= RCC_AHB1ENR_GPIOEEN;  // ENABLE GPIOE Clock
 80002ee:	4a3d      	ldr	r2, [pc, #244]	; (80003e4 <TIM1_Init+0x180>)
 80002f0:	4b3c      	ldr	r3, [pc, #240]	; (80003e4 <TIM1_Init+0x180>)
 80002f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f4:	f043 0310 	orr.w	r3, r3, #16
 80002f8:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOE->MODER  |= (1 << 19);
 80002fa:	4a3d      	ldr	r2, [pc, #244]	; (80003f0 <TIM1_Init+0x18c>)
 80002fc:	4b3c      	ldr	r3, [pc, #240]	; (80003f0 <TIM1_Init+0x18c>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000304:	6013      	str	r3, [r2, #0]
	GPIOE->MODER  &= ~(1 << 18);           // GPIOE9 - AF Output
 8000306:	4a3a      	ldr	r2, [pc, #232]	; (80003f0 <TIM1_Init+0x18c>)
 8000308:	4b39      	ldr	r3, [pc, #228]	; (80003f0 <TIM1_Init+0x18c>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000310:	6013      	str	r3, [r2, #0]
	GPIOE->OTYPER &= ~(1 << 9);            // GPIOE9 - PP
 8000312:	4a37      	ldr	r2, [pc, #220]	; (80003f0 <TIM1_Init+0x18c>)
 8000314:	4b36      	ldr	r3, [pc, #216]	; (80003f0 <TIM1_Init+0x18c>)
 8000316:	685b      	ldr	r3, [r3, #4]
 8000318:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800031c:	6053      	str	r3, [r2, #4]
	GPIOE->PUPDR  |= (1 << 19);
 800031e:	4a34      	ldr	r2, [pc, #208]	; (80003f0 <TIM1_Init+0x18c>)
 8000320:	4b33      	ldr	r3, [pc, #204]	; (80003f0 <TIM1_Init+0x18c>)
 8000322:	68db      	ldr	r3, [r3, #12]
 8000324:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000328:	60d3      	str	r3, [r2, #12]
	GPIOE->PUPDR  &= ~(1 << 18);           // GPIOE9 - Pull-Down
 800032a:	4a31      	ldr	r2, [pc, #196]	; (80003f0 <TIM1_Init+0x18c>)
 800032c:	4b30      	ldr	r3, [pc, #192]	; (80003f0 <TIM1_Init+0x18c>)
 800032e:	68db      	ldr	r3, [r3, #12]
 8000330:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000334:	60d3      	str	r3, [r2, #12]
	GPIOE->OSPEEDR|= (0x03 << 18);         // GPIOE9 - High Speed
 8000336:	4a2e      	ldr	r2, [pc, #184]	; (80003f0 <TIM1_Init+0x18c>)
 8000338:	4b2d      	ldr	r3, [pc, #180]	; (80003f0 <TIM1_Init+0x18c>)
 800033a:	689b      	ldr	r3, [r3, #8]
 800033c:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8000340:	6093      	str	r3, [r2, #8]
	GPIOE->AFR[1] |= (1 << 4);
 8000342:	4a2b      	ldr	r2, [pc, #172]	; (80003f0 <TIM1_Init+0x18c>)
 8000344:	4b2a      	ldr	r3, [pc, #168]	; (80003f0 <TIM1_Init+0x18c>)
 8000346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000348:	f043 0310 	orr.w	r3, r3, #16
 800034c:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOE->AFR[1] &= ~(0x07 << 5);         // GPIOE9 - AF1 <--> TIM1
 800034e:	4a28      	ldr	r2, [pc, #160]	; (80003f0 <TIM1_Init+0x18c>)
 8000350:	4b27      	ldr	r3, [pc, #156]	; (80003f0 <TIM1_Init+0x18c>)
 8000352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000354:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8000358:	6253      	str	r3, [r2, #36]	; 0x24
	RCC->AHB1ENR  |= RCC_AHB1ENR_GPIOAEN;  // ENABLE GPIOA Clock
 800035a:	4a22      	ldr	r2, [pc, #136]	; (80003e4 <TIM1_Init+0x180>)
 800035c:	4b21      	ldr	r3, [pc, #132]	; (80003e4 <TIM1_Init+0x180>)
 800035e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000360:	f043 0301 	orr.w	r3, r3, #1
 8000364:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA->MODER  |= (1 << 15);
 8000366:	4a23      	ldr	r2, [pc, #140]	; (80003f4 <TIM1_Init+0x190>)
 8000368:	4b22      	ldr	r3, [pc, #136]	; (80003f4 <TIM1_Init+0x190>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000370:	6013      	str	r3, [r2, #0]
	GPIOA->MODER  &= ~(1 << 14);           // GPIOA7 - AF Output
 8000372:	4a20      	ldr	r2, [pc, #128]	; (80003f4 <TIM1_Init+0x190>)
 8000374:	4b1f      	ldr	r3, [pc, #124]	; (80003f4 <TIM1_Init+0x190>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800037c:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER &= ~(1 << 7);            // GPIOA7 - PP
 800037e:	4a1d      	ldr	r2, [pc, #116]	; (80003f4 <TIM1_Init+0x190>)
 8000380:	4b1c      	ldr	r3, [pc, #112]	; (80003f4 <TIM1_Init+0x190>)
 8000382:	685b      	ldr	r3, [r3, #4]
 8000384:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000388:	6053      	str	r3, [r2, #4]
	GPIOA->PUPDR  |= (1 << 15);
 800038a:	4a1a      	ldr	r2, [pc, #104]	; (80003f4 <TIM1_Init+0x190>)
 800038c:	4b19      	ldr	r3, [pc, #100]	; (80003f4 <TIM1_Init+0x190>)
 800038e:	68db      	ldr	r3, [r3, #12]
 8000390:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000394:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR  &= ~(1 << 14);           // GPIOA7 - Pull-Down
 8000396:	4a17      	ldr	r2, [pc, #92]	; (80003f4 <TIM1_Init+0x190>)
 8000398:	4b16      	ldr	r3, [pc, #88]	; (80003f4 <TIM1_Init+0x190>)
 800039a:	68db      	ldr	r3, [r3, #12]
 800039c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80003a0:	60d3      	str	r3, [r2, #12]
	GPIOA->OSPEEDR|= (0x03 << 14);         // GPIOA7 - High Speed
 80003a2:	4a14      	ldr	r2, [pc, #80]	; (80003f4 <TIM1_Init+0x190>)
 80003a4:	4b13      	ldr	r3, [pc, #76]	; (80003f4 <TIM1_Init+0x190>)
 80003a6:	689b      	ldr	r3, [r3, #8]
 80003a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80003ac:	6093      	str	r3, [r2, #8]
	GPIOA->AFR[0] |= (1 << 28);
 80003ae:	4a11      	ldr	r2, [pc, #68]	; (80003f4 <TIM1_Init+0x190>)
 80003b0:	4b10      	ldr	r3, [pc, #64]	; (80003f4 <TIM1_Init+0x190>)
 80003b2:	6a1b      	ldr	r3, [r3, #32]
 80003b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003b8:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(0x07 << 29);        // GPIOA7 - AF1 <--> TIM1
 80003ba:	4a0e      	ldr	r2, [pc, #56]	; (80003f4 <TIM1_Init+0x190>)
 80003bc:	4b0d      	ldr	r3, [pc, #52]	; (80003f4 <TIM1_Init+0x190>)
 80003be:	6a1b      	ldr	r3, [r3, #32]
 80003c0:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80003c4:	6213      	str	r3, [r2, #32]

	TIM1->CR1     |= TIM_CR1_CEN;          // ENABLE TIM1
 80003c6:	4a08      	ldr	r2, [pc, #32]	; (80003e8 <TIM1_Init+0x184>)
 80003c8:	4b07      	ldr	r3, [pc, #28]	; (80003e8 <TIM1_Init+0x184>)
 80003ca:	881b      	ldrh	r3, [r3, #0]
 80003cc:	b29b      	uxth	r3, r3
 80003ce:	f043 0301 	orr.w	r3, r3, #1
 80003d2:	b29b      	uxth	r3, r3
 80003d4:	8013      	strh	r3, [r2, #0]
}
 80003d6:	bf00      	nop
 80003d8:	370c      	adds	r7, #12
 80003da:	46bd      	mov	sp, r7
 80003dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e0:	4770      	bx	lr
 80003e2:	bf00      	nop
 80003e4:	40023800 	.word	0x40023800
 80003e8:	40010000 	.word	0x40010000
 80003ec:	ffffcc00 	.word	0xffffcc00
 80003f0:	40021000 	.word	0x40021000
 80003f4:	40020000 	.word	0x40020000

080003f8 <TIM1_PWM_Start>:

void TIM1_PWM_Start(void)
{
 80003f8:	b480      	push	{r7}
 80003fa:	af00      	add	r7, sp, #0
	TIM1->CCER    |= 0x01;                 // ENABLE CC1
 80003fc:	4a0a      	ldr	r2, [pc, #40]	; (8000428 <TIM1_PWM_Start+0x30>)
 80003fe:	4b0a      	ldr	r3, [pc, #40]	; (8000428 <TIM1_PWM_Start+0x30>)
 8000400:	8c1b      	ldrh	r3, [r3, #32]
 8000402:	b29b      	uxth	r3, r3
 8000404:	f043 0301 	orr.w	r3, r3, #1
 8000408:	b29b      	uxth	r3, r3
 800040a:	8413      	strh	r3, [r2, #32]
	TIM1->CCER    |= (1 << 2);
 800040c:	4a06      	ldr	r2, [pc, #24]	; (8000428 <TIM1_PWM_Start+0x30>)
 800040e:	4b06      	ldr	r3, [pc, #24]	; (8000428 <TIM1_PWM_Start+0x30>)
 8000410:	8c1b      	ldrh	r3, [r3, #32]
 8000412:	b29b      	uxth	r3, r3
 8000414:	f043 0304 	orr.w	r3, r3, #4
 8000418:	b29b      	uxth	r3, r3
 800041a:	8413      	strh	r3, [r2, #32]
}
 800041c:	bf00      	nop
 800041e:	46bd      	mov	sp, r7
 8000420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000424:	4770      	bx	lr
 8000426:	bf00      	nop
 8000428:	40010000 	.word	0x40010000

0800042c <TIM1_PWM_Stop>:

void TIM1_PWM_Stop(void)
{
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0
	TIM1->CCER    &= ~(1 << 0);
 8000430:	4a0a      	ldr	r2, [pc, #40]	; (800045c <TIM1_PWM_Stop+0x30>)
 8000432:	4b0a      	ldr	r3, [pc, #40]	; (800045c <TIM1_PWM_Stop+0x30>)
 8000434:	8c1b      	ldrh	r3, [r3, #32]
 8000436:	b29b      	uxth	r3, r3
 8000438:	f023 0301 	bic.w	r3, r3, #1
 800043c:	b29b      	uxth	r3, r3
 800043e:	8413      	strh	r3, [r2, #32]
	TIM1->CCER    &= ~(1 << 2);
 8000440:	4a06      	ldr	r2, [pc, #24]	; (800045c <TIM1_PWM_Stop+0x30>)
 8000442:	4b06      	ldr	r3, [pc, #24]	; (800045c <TIM1_PWM_Stop+0x30>)
 8000444:	8c1b      	ldrh	r3, [r3, #32]
 8000446:	b29b      	uxth	r3, r3
 8000448:	f023 0304 	bic.w	r3, r3, #4
 800044c:	b29b      	uxth	r3, r3
 800044e:	8413      	strh	r3, [r2, #32]
}
 8000450:	bf00      	nop
 8000452:	46bd      	mov	sp, r7
 8000454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000458:	4770      	bx	lr
 800045a:	bf00      	nop
 800045c:	40010000 	.word	0x40010000

08000460 <TIM1_Set_PWM_Freq>:

void TIM1_Set_PWM_Freq(uint32_t freq)
{
 8000460:	b480      	push	{r7}
 8000462:	b085      	sub	sp, #20
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
	uint32_t ARR, PSC;
	PSC = TIM1->PSC;
 8000468:	4b0a      	ldr	r3, [pc, #40]	; (8000494 <TIM1_Set_PWM_Freq+0x34>)
 800046a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800046c:	b29b      	uxth	r3, r3
 800046e:	60fb      	str	r3, [r7, #12]
	ARR = (uint32_t) SYSCLK / (PSC + 1) / freq;
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	3301      	adds	r3, #1
 8000474:	4a08      	ldr	r2, [pc, #32]	; (8000498 <TIM1_Set_PWM_Freq+0x38>)
 8000476:	fbb2 f2f3 	udiv	r2, r2, r3
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000480:	60bb      	str	r3, [r7, #8]
	TIM1->ARR = ARR;
 8000482:	4a04      	ldr	r2, [pc, #16]	; (8000494 <TIM1_Set_PWM_Freq+0x34>)
 8000484:	68bb      	ldr	r3, [r7, #8]
 8000486:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8000488:	bf00      	nop
 800048a:	3714      	adds	r7, #20
 800048c:	46bd      	mov	sp, r7
 800048e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000492:	4770      	bx	lr
 8000494:	40010000 	.word	0x40010000
 8000498:	09896800 	.word	0x09896800

0800049c <TIM1_Set_PWM_Duty>:
void TIM1_Set_PWM_Duty(uint8_t Duty_Percent)
{
 800049c:	b480      	push	{r7}
 800049e:	b085      	sub	sp, #20
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	4603      	mov	r3, r0
 80004a4:	71fb      	strb	r3, [r7, #7]
	uint32_t CCR, ARR;
	ARR = TIM1->ARR;
 80004a6:	4b0a      	ldr	r3, [pc, #40]	; (80004d0 <TIM1_Set_PWM_Duty+0x34>)
 80004a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004aa:	60fb      	str	r3, [r7, #12]
	CCR = (uint32_t) (Duty_Percent * ARR / 100);
 80004ac:	79fb      	ldrb	r3, [r7, #7]
 80004ae:	68fa      	ldr	r2, [r7, #12]
 80004b0:	fb02 f303 	mul.w	r3, r2, r3
 80004b4:	4a07      	ldr	r2, [pc, #28]	; (80004d4 <TIM1_Set_PWM_Duty+0x38>)
 80004b6:	fba2 2303 	umull	r2, r3, r2, r3
 80004ba:	095b      	lsrs	r3, r3, #5
 80004bc:	60bb      	str	r3, [r7, #8]
	TIM1->CCR1 = CCR;
 80004be:	4a04      	ldr	r2, [pc, #16]	; (80004d0 <TIM1_Set_PWM_Duty+0x34>)
 80004c0:	68bb      	ldr	r3, [r7, #8]
 80004c2:	6353      	str	r3, [r2, #52]	; 0x34
}
 80004c4:	bf00      	nop
 80004c6:	3714      	adds	r7, #20
 80004c8:	46bd      	mov	sp, r7
 80004ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ce:	4770      	bx	lr
 80004d0:	40010000 	.word	0x40010000
 80004d4:	51eb851f 	.word	0x51eb851f

080004d8 <TIM7_Init>:

void TIM7_Init(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM7EN;
 80004dc:	4a17      	ldr	r2, [pc, #92]	; (800053c <TIM7_Init+0x64>)
 80004de:	4b17      	ldr	r3, [pc, #92]	; (800053c <TIM7_Init+0x64>)
 80004e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004e2:	f043 0320 	orr.w	r3, r3, #32
 80004e6:	6413      	str	r3, [r2, #64]	; 0x40
	TIM7->PSC     = 39999;         // TIM6 Time Base = 0.5ms
 80004e8:	4b15      	ldr	r3, [pc, #84]	; (8000540 <TIM7_Init+0x68>)
 80004ea:	f649 423f 	movw	r2, #39999	; 0x9c3f
 80004ee:	851a      	strh	r2, [r3, #40]	; 0x28
	TIM7->CR1    |= 0x0000008c;    // OPM Mode, Update EV
 80004f0:	4a13      	ldr	r2, [pc, #76]	; (8000540 <TIM7_Init+0x68>)
 80004f2:	4b13      	ldr	r3, [pc, #76]	; (8000540 <TIM7_Init+0x68>)
 80004f4:	881b      	ldrh	r3, [r3, #0]
 80004f6:	b29b      	uxth	r3, r3
 80004f8:	f043 038c 	orr.w	r3, r3, #140	; 0x8c
 80004fc:	b29b      	uxth	r3, r3
 80004fe:	8013      	strh	r3, [r2, #0]
	TIM7->DIER   |= 0x01;          // ENABLE UEV
 8000500:	4a0f      	ldr	r2, [pc, #60]	; (8000540 <TIM7_Init+0x68>)
 8000502:	4b0f      	ldr	r3, [pc, #60]	; (8000540 <TIM7_Init+0x68>)
 8000504:	899b      	ldrh	r3, [r3, #12]
 8000506:	b29b      	uxth	r3, r3
 8000508:	f043 0301 	orr.w	r3, r3, #1
 800050c:	b29b      	uxth	r3, r3
 800050e:	8193      	strh	r3, [r2, #12]
	NVIC->ISER[1]|= (1 << 23);     // ENABLE IRQn-55
 8000510:	4a0c      	ldr	r2, [pc, #48]	; (8000544 <TIM7_Init+0x6c>)
 8000512:	4b0c      	ldr	r3, [pc, #48]	; (8000544 <TIM7_Init+0x6c>)
 8000514:	685b      	ldr	r3, [r3, #4]
 8000516:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800051a:	6053      	str	r3, [r2, #4]
	NVIC->IP[55] |= 0x50;          // IRQn Priority 1 - 1
 800051c:	4a09      	ldr	r2, [pc, #36]	; (8000544 <TIM7_Init+0x6c>)
 800051e:	4b09      	ldr	r3, [pc, #36]	; (8000544 <TIM7_Init+0x6c>)
 8000520:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8000524:	b2db      	uxtb	r3, r3
 8000526:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 800052a:	b2db      	uxtb	r3, r3
 800052c:	f882 3337 	strb.w	r3, [r2, #823]	; 0x337
}
 8000530:	bf00      	nop
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	40023800 	.word	0x40023800
 8000540:	40001400 	.word	0x40001400
 8000544:	e000e100 	.word	0xe000e100

08000548 <TIM7_Start>:

void TIM7_Start(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
	TIM7->CR1 |= 0x01;
 800054c:	4a06      	ldr	r2, [pc, #24]	; (8000568 <TIM7_Start+0x20>)
 800054e:	4b06      	ldr	r3, [pc, #24]	; (8000568 <TIM7_Start+0x20>)
 8000550:	881b      	ldrh	r3, [r3, #0]
 8000552:	b29b      	uxth	r3, r3
 8000554:	f043 0301 	orr.w	r3, r3, #1
 8000558:	b29b      	uxth	r3, r3
 800055a:	8013      	strh	r3, [r2, #0]
}
 800055c:	bf00      	nop
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	40001400 	.word	0x40001400

0800056c <TIM7_SetVal>:
{
	TIM7->CR1 &= 0x00;
}

void TIM7_SetVal(uint16_t ARR)
{
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	80fb      	strh	r3, [r7, #6]
	TIM7->ARR = ARR;
 8000576:	4a04      	ldr	r2, [pc, #16]	; (8000588 <TIM7_SetVal+0x1c>)
 8000578:	88fb      	ldrh	r3, [r7, #6]
 800057a:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800057c:	bf00      	nop
 800057e:	370c      	adds	r7, #12
 8000580:	46bd      	mov	sp, r7
 8000582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000586:	4770      	bx	lr
 8000588:	40001400 	.word	0x40001400

0800058c <main>:

void NVIC_Init_Priority_Group(void);
void SysTick_Init(void);

int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
	SysTick_Init();
 8000590:	f000 f816 	bl	80005c0 <SysTick_Init>
	NVIC_Init_Priority_Group();
 8000594:	f000 f828 	bl	80005e8 <NVIC_Init_Priority_Group>
	TIM1_Init(159);
 8000598:	209f      	movs	r0, #159	; 0x9f
 800059a:	f7ff fe63 	bl	8000264 <TIM1_Init>
	TIM1_Set_PWM_Freq(1000);
 800059e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005a2:	f7ff ff5d 	bl	8000460 <TIM1_Set_PWM_Freq>
	TIM1_Set_PWM_Duty(50);
 80005a6:	2032      	movs	r0, #50	; 0x32
 80005a8:	f7ff ff78 	bl	800049c <TIM1_Set_PWM_Duty>
	TIM1_PWM_Start();
 80005ac:	f7ff ff24 	bl	80003f8 <TIM1_PWM_Start>
	TIM7_Init();
 80005b0:	f7ff ff92 	bl	80004d8 <TIM7_Init>
	TIM7_Start();
 80005b4:	f7ff ffc8 	bl	8000548 <TIM7_Start>
	Sing_Start();
 80005b8:	f7ff fe06 	bl	80001c8 <Sing_Start>
	for(;;);
 80005bc:	e7fe      	b.n	80005bc <main+0x30>
	...

080005c0 <SysTick_Init>:
}

// Init Systick Timer
void SysTick_Init(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
	SysTick->LOAD  = 42000000;       //  SysTick Freq = 1KHz
 80005c4:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <SysTick_Init+0x20>)
 80005c6:	4a07      	ldr	r2, [pc, #28]	; (80005e4 <SysTick_Init+0x24>)
 80005c8:	605a      	str	r2, [r3, #4]
    SysTick->CTRL |= 0x00000003;     //  SysTick ENABLE IRQ, CLK = SYS_CLK / 8
 80005ca:	4a05      	ldr	r2, [pc, #20]	; (80005e0 <SysTick_Init+0x20>)
 80005cc:	4b04      	ldr	r3, [pc, #16]	; (80005e0 <SysTick_Init+0x20>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f043 0303 	orr.w	r3, r3, #3
 80005d4:	6013      	str	r3, [r2, #0]
}
 80005d6:	bf00      	nop
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr
 80005e0:	e000e010 	.word	0xe000e010
 80005e4:	0280de80 	.word	0x0280de80

080005e8 <NVIC_Init_Priority_Group>:

// Init NVIC
void NVIC_Init_Priority_Group(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
	uint32_t tmp_AIRCR = 0x00000000;
 80005ee:	2300      	movs	r3, #0
 80005f0:	607b      	str	r3, [r7, #4]
	tmp_AIRCR |= 0xfa050000;          //  Set AIRCR_KEY
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	f043 437a 	orr.w	r3, r3, #4194304000	; 0xfa000000
 80005f8:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 80005fc:	607b      	str	r3, [r7, #4]
	tmp_AIRCR |= (1 << 8) | (1 << 10);
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8000604:	607b      	str	r3, [r7, #4]
	tmp_AIRCR &= ~(1 << 9);           //  Set xx.yy
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800060c:	607b      	str	r3, [r7, #4]
	SCB->AIRCR = tmp_AIRCR;           //  Set AIRCR
 800060e:	4a04      	ldr	r2, [pc, #16]	; (8000620 <NVIC_Init_Priority_Group+0x38>)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	60d3      	str	r3, [r2, #12]
}
 8000614:	bf00      	nop
 8000616:	370c      	adds	r7, #12
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr
 8000620:	e000ed00 	.word	0xe000ed00

08000624 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
	/*
	 * Place Holder For SysTick Handler
	 */
}
 8000628:	bf00      	nop
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
	...

08000634 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000634:	f8df d034 	ldr.w	sp, [pc, #52]	; 800066c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000638:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800063a:	e003      	b.n	8000644 <LoopCopyDataInit>

0800063c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800063c:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800063e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000640:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000642:	3104      	adds	r1, #4

08000644 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000644:	480b      	ldr	r0, [pc, #44]	; (8000674 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000646:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000648:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800064a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800064c:	d3f6      	bcc.n	800063c <CopyDataInit>
  ldr  r2, =_sbss
 800064e:	4a0b      	ldr	r2, [pc, #44]	; (800067c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000650:	e002      	b.n	8000658 <LoopFillZerobss>

08000652 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000652:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000654:	f842 3b04 	str.w	r3, [r2], #4

08000658 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000658:	4b09      	ldr	r3, [pc, #36]	; (8000680 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800065a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800065c:	d3f9      	bcc.n	8000652 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800065e:	f000 f83b 	bl	80006d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000662:	f000 f8eb 	bl	800083c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000666:	f7ff ff91 	bl	800058c <main>
  bx  lr    
 800066a:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800066c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000670:	080008a4 	.word	0x080008a4
  ldr  r0, =_sdata
 8000674:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000678:	2000006c 	.word	0x2000006c
  ldr  r2, =_sbss
 800067c:	2000006c 	.word	0x2000006c
  ldr  r3, = _ebss
 8000680:	20000088 	.word	0x20000088

08000684 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000684:	e7fe      	b.n	8000684 <ADC_IRQHandler>

08000686 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000686:	b480      	push	{r7}
 8000688:	af00      	add	r7, sp, #0
}
 800068a:	bf00      	nop
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr

08000694 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000698:	e7fe      	b.n	8000698 <HardFault_Handler+0x4>

0800069a <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800069a:	b480      	push	{r7}
 800069c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800069e:	e7fe      	b.n	800069e <MemManage_Handler+0x4>

080006a0 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80006a4:	e7fe      	b.n	80006a4 <BusFault_Handler+0x4>

080006a6 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80006a6:	b480      	push	{r7}
 80006a8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80006aa:	e7fe      	b.n	80006aa <UsageFault_Handler+0x4>

080006ac <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
}
 80006b0:	bf00      	nop
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr

080006ba <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80006ba:	b480      	push	{r7}
 80006bc:	af00      	add	r7, sp, #0
}
 80006be:	bf00      	nop
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr

080006c8 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
}
 80006cc:	bf00      	nop
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
	...

080006d8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006dc:	4a16      	ldr	r2, [pc, #88]	; (8000738 <SystemInit+0x60>)
 80006de:	4b16      	ldr	r3, [pc, #88]	; (8000738 <SystemInit+0x60>)
 80006e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80006ec:	4a13      	ldr	r2, [pc, #76]	; (800073c <SystemInit+0x64>)
 80006ee:	4b13      	ldr	r3, [pc, #76]	; (800073c <SystemInit+0x64>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f043 0301 	orr.w	r3, r3, #1
 80006f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006f8:	4b10      	ldr	r3, [pc, #64]	; (800073c <SystemInit+0x64>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80006fe:	4a0f      	ldr	r2, [pc, #60]	; (800073c <SystemInit+0x64>)
 8000700:	4b0e      	ldr	r3, [pc, #56]	; (800073c <SystemInit+0x64>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000708:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800070c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800070e:	4b0b      	ldr	r3, [pc, #44]	; (800073c <SystemInit+0x64>)
 8000710:	4a0b      	ldr	r2, [pc, #44]	; (8000740 <SystemInit+0x68>)
 8000712:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000714:	4a09      	ldr	r2, [pc, #36]	; (800073c <SystemInit+0x64>)
 8000716:	4b09      	ldr	r3, [pc, #36]	; (800073c <SystemInit+0x64>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800071e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000720:	4b06      	ldr	r3, [pc, #24]	; (800073c <SystemInit+0x64>)
 8000722:	2200      	movs	r2, #0
 8000724:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000726:	f000 f80d 	bl	8000744 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800072a:	4b03      	ldr	r3, [pc, #12]	; (8000738 <SystemInit+0x60>)
 800072c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000730:	609a      	str	r2, [r3, #8]
#endif
}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	e000ed00 	.word	0xe000ed00
 800073c:	40023800 	.word	0x40023800
 8000740:	24003010 	.word	0x24003010

08000744 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800074a:	2300      	movs	r3, #0
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	2300      	movs	r3, #0
 8000750:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000752:	4a36      	ldr	r2, [pc, #216]	; (800082c <SetSysClock+0xe8>)
 8000754:	4b35      	ldr	r3, [pc, #212]	; (800082c <SetSysClock+0xe8>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800075c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800075e:	4b33      	ldr	r3, [pc, #204]	; (800082c <SetSysClock+0xe8>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000766:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	3301      	adds	r3, #1
 800076c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d103      	bne.n	800077c <SetSysClock+0x38>
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800077a:	d1f0      	bne.n	800075e <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800077c:	4b2b      	ldr	r3, [pc, #172]	; (800082c <SetSysClock+0xe8>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000784:	2b00      	cmp	r3, #0
 8000786:	d002      	beq.n	800078e <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000788:	2301      	movs	r3, #1
 800078a:	603b      	str	r3, [r7, #0]
 800078c:	e001      	b.n	8000792 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800078e:	2300      	movs	r3, #0
 8000790:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	2b01      	cmp	r3, #1
 8000796:	d142      	bne.n	800081e <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000798:	4a24      	ldr	r2, [pc, #144]	; (800082c <SetSysClock+0xe8>)
 800079a:	4b24      	ldr	r3, [pc, #144]	; (800082c <SetSysClock+0xe8>)
 800079c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007a2:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80007a4:	4a22      	ldr	r2, [pc, #136]	; (8000830 <SetSysClock+0xec>)
 80007a6:	4b22      	ldr	r3, [pc, #136]	; (8000830 <SetSysClock+0xec>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007ae:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80007b0:	4a1e      	ldr	r2, [pc, #120]	; (800082c <SetSysClock+0xe8>)
 80007b2:	4b1e      	ldr	r3, [pc, #120]	; (800082c <SetSysClock+0xe8>)
 80007b4:	689b      	ldr	r3, [r3, #8]
 80007b6:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80007b8:	4a1c      	ldr	r2, [pc, #112]	; (800082c <SetSysClock+0xe8>)
 80007ba:	4b1c      	ldr	r3, [pc, #112]	; (800082c <SetSysClock+0xe8>)
 80007bc:	689b      	ldr	r3, [r3, #8]
 80007be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007c2:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80007c4:	4a19      	ldr	r2, [pc, #100]	; (800082c <SetSysClock+0xe8>)
 80007c6:	4b19      	ldr	r3, [pc, #100]	; (800082c <SetSysClock+0xe8>)
 80007c8:	689b      	ldr	r3, [r3, #8]
 80007ca:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80007ce:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80007d0:	4b16      	ldr	r3, [pc, #88]	; (800082c <SetSysClock+0xe8>)
 80007d2:	4a18      	ldr	r2, [pc, #96]	; (8000834 <SetSysClock+0xf0>)
 80007d4:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80007d6:	4a15      	ldr	r2, [pc, #84]	; (800082c <SetSysClock+0xe8>)
 80007d8:	4b14      	ldr	r3, [pc, #80]	; (800082c <SetSysClock+0xe8>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80007e0:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80007e2:	bf00      	nop
 80007e4:	4b11      	ldr	r3, [pc, #68]	; (800082c <SetSysClock+0xe8>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d0f9      	beq.n	80007e4 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80007f0:	4b11      	ldr	r3, [pc, #68]	; (8000838 <SetSysClock+0xf4>)
 80007f2:	f240 7205 	movw	r2, #1797	; 0x705
 80007f6:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80007f8:	4a0c      	ldr	r2, [pc, #48]	; (800082c <SetSysClock+0xe8>)
 80007fa:	4b0c      	ldr	r3, [pc, #48]	; (800082c <SetSysClock+0xe8>)
 80007fc:	689b      	ldr	r3, [r3, #8]
 80007fe:	f023 0303 	bic.w	r3, r3, #3
 8000802:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000804:	4a09      	ldr	r2, [pc, #36]	; (800082c <SetSysClock+0xe8>)
 8000806:	4b09      	ldr	r3, [pc, #36]	; (800082c <SetSysClock+0xe8>)
 8000808:	689b      	ldr	r3, [r3, #8]
 800080a:	f043 0302 	orr.w	r3, r3, #2
 800080e:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000810:	bf00      	nop
 8000812:	4b06      	ldr	r3, [pc, #24]	; (800082c <SetSysClock+0xe8>)
 8000814:	689b      	ldr	r3, [r3, #8]
 8000816:	f003 030c 	and.w	r3, r3, #12
 800081a:	2b08      	cmp	r3, #8
 800081c:	d1f9      	bne.n	8000812 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 800081e:	bf00      	nop
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	40023800 	.word	0x40023800
 8000830:	40007000 	.word	0x40007000
 8000834:	07405008 	.word	0x07405008
 8000838:	40023c00 	.word	0x40023c00

0800083c <__libc_init_array>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	4e0d      	ldr	r6, [pc, #52]	; (8000874 <__libc_init_array+0x38>)
 8000840:	4c0d      	ldr	r4, [pc, #52]	; (8000878 <__libc_init_array+0x3c>)
 8000842:	1ba4      	subs	r4, r4, r6
 8000844:	10a4      	asrs	r4, r4, #2
 8000846:	2500      	movs	r5, #0
 8000848:	42a5      	cmp	r5, r4
 800084a:	d109      	bne.n	8000860 <__libc_init_array+0x24>
 800084c:	4e0b      	ldr	r6, [pc, #44]	; (800087c <__libc_init_array+0x40>)
 800084e:	4c0c      	ldr	r4, [pc, #48]	; (8000880 <__libc_init_array+0x44>)
 8000850:	f000 f818 	bl	8000884 <_init>
 8000854:	1ba4      	subs	r4, r4, r6
 8000856:	10a4      	asrs	r4, r4, #2
 8000858:	2500      	movs	r5, #0
 800085a:	42a5      	cmp	r5, r4
 800085c:	d105      	bne.n	800086a <__libc_init_array+0x2e>
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000864:	4798      	blx	r3
 8000866:	3501      	adds	r5, #1
 8000868:	e7ee      	b.n	8000848 <__libc_init_array+0xc>
 800086a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800086e:	4798      	blx	r3
 8000870:	3501      	adds	r5, #1
 8000872:	e7f2      	b.n	800085a <__libc_init_array+0x1e>
 8000874:	0800089c 	.word	0x0800089c
 8000878:	0800089c 	.word	0x0800089c
 800087c:	0800089c 	.word	0x0800089c
 8000880:	080008a0 	.word	0x080008a0

08000884 <_init>:
 8000884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000886:	bf00      	nop
 8000888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800088a:	bc08      	pop	{r3}
 800088c:	469e      	mov	lr, r3
 800088e:	4770      	bx	lr

08000890 <_fini>:
 8000890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000892:	bf00      	nop
 8000894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000896:	bc08      	pop	{r3}
 8000898:	469e      	mov	lr, r3
 800089a:	4770      	bx	lr
